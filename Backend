import mysql.connector

def get_connection():
    return mysql.connector.connect(
        host="localhost",
        user="root",
        password="MYSQLmabelle05!",
        database="jinder"
    )

from flask import Flask, request, jsonify, session, url_for
from flask_mysqldb import MySQL
from flask_cors import CORS
from functools import wraps
import bcrypt
import re
import os
from werkzeug.utils import secure_filename

app = Flask(__name__)
CORS(app)

# MySQL Configuration
app.config['MYSQL_HOST'] = 'localhost'
app.config['MYSQL_USER'] = 'root'
app.config['MYSQL_PASSWORD'] = 'MYSQLmabelle05!'
app.config['MYSQL_DB'] = 'jinder'
app.secret_key = 'ourlonglongkey'
mysql = MySQL(app)

# Upload Configuration
UPLOAD_FOLDER = 'uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
ALLOWED_EXTENSIONS = {'pdf', 'doc', 'docx'}

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# Sign Up job users -> WORKSSSSSS
@app.route('/signup', methods=['POST'])
def signup():
    try:
        # Validate files
        if 'cv' not in request.files or 'cover-letter' not in request.files:
            return jsonify({'success': False, 'message': 'CV and Cover Letter are required.'}), 400

        cv_file = request.files['cv']
        cl_file = request.files['cover-letter']

        if cv_file.filename == '' or cl_file.filename == '':
            return jsonify({'success': False, 'message': 'No selected file.'}), 400

        if not (allowed_file(cv_file.filename) and allowed_file(cl_file.filename)):
            return jsonify({'success': False, 'message': 'Allowed file types: PDF, DOC, DOCX.'}), 400

        # Secure filenames and save
        cv_filename = secure_filename(f"cv_{request.form.get('email')}_{cv_file.filename}")
        cl_filename = secure_filename(f"cl_{request.form.get('email')}_{cl_file.filename}")
        cv_path = os.path.join(app.config['UPLOAD_FOLDER'], cv_filename)
        cl_path = os.path.join(app.config['UPLOAD_FOLDER'], cl_filename)
        cv_file.save(cv_path)
        cl_file.save(cl_path)

        # Get form data
        first_name = request.form.get('firstname', '').strip()
        last_name = request.form.get('lastname', '').strip()
        gender = request.form.get('gender', '').capitalize()  # Ensure Male/Female
        age = int(request.form.get('age', 0))
        major = request.form.get('major', '').strip()
        email = request.form.get('email', '').strip().lower()
        password = request.form.get('password', '')

        # Validate required fields
        if not all([first_name, last_name, gender, major, email, password]) or age < 18:
            return jsonify({'success': False, 'message': 'Missing/invalid fields. Age must be â‰¥18.'}), 400

        # Hash password
        hashed_pw = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

        cur = mysql.connection.cursor()

        # Check email uniqueness
        cur.execute("SELECT user_id FROM user WHERE user_email = %s", (email,))
        if cur.fetchone():
            cur.close()
            return jsonify({'success': False, 'message': 'Email already exists.'}), 409

        # Insert user
        cur.execute("""
            INSERT INTO user (
                first_name, last_name, gender, major, age, 
                user_email, user_password, CV_URL, CL_URL
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
        """, (
            first_name, last_name, gender, major, age,
            email, hashed_pw, cv_path, cl_path
        ))

        mysql.connection.commit()
        cur.close()

        return jsonify({
            'success': True,
            'message': 'Registration successful!',
            'redirect': '/login.html'
        }), 201

    except Exception as e:
        mysql.connection.rollback()
        return jsonify({
            'success': False,
            'message': 'Server error during registration.',
            'error': str(e)
        }), 500

# GETTING AN ERRORRRRR -> ig i should do the dashboard before
@app.route('/jobseeker-login', methods=['POST'])
def jobseeker_login():
    try:
        # Change: Handle both JSON and form-data
        if request.is_json:
            data = request.get_json()
        else:
            data = request.form

        email = data.get('email', '').strip().lower()
        password = data.get('password', '').strip()

        # Validate inputs
        if not email or not password:
            return jsonify({
                'success': False,
                'message': 'Email and password are required'
            }), 400

        # Check email format
        if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
            return jsonify({
                'success': False,
                'message': 'Invalid email format'
            }), 400

        # Database connection
        cur = mysql.connection.cursor()

        # Find user by email
        cur.execute("""
            SELECT user_id, first_name, last_name, user_email, user_password, 
                   CV_URL, CL_URL, major, gender, age
            FROM user 
            WHERE user_email = %s
        """, (email,))
        
        user = cur.fetchone()
        cur.close()

        # User not found
        if not user:
            return jsonify({
                'success': False,
                'message': 'Invalid email or password'
            }), 401

        # Verify password
        if not bcrypt.checkpw(password.encode('utf-8'), user[4].encode('utf-8')):
            return jsonify({
                'success': False,
                'message': 'Invalid email or password'
            }), 401

        #set session
        session['user_id'] = user[0] 

        # Prepare user data response
        user_data = {
            'user_id': user[0],
            'first_name': user[1],
            'last_name': user[2],
            'email': user[3],
            'cv_url': user[5],
            'cl_url': user[6],
            'major': user[7],
            'gender': user[8],
            'age': user[9],
            'full_name': f"{user[1]} {user[2]}"
        }

        return jsonify({
            'success': True,
            'message': 'Login successful',
            'user': user_data,
            'redirect': 'jobseeker-dashboard.html'
        })

    except Exception as e:
        return jsonify({
            'success': False,
            'message': 'Login error',
            'error': str(e)
        }), 500

# WORKSSSSSSS
@app.route('/company-signup', methods=['POST'])
def company_signup():
    try:
        # Validate files (logo image)
        if 'logo' not in request.files:
            return jsonify({'success': False, 'message': 'Company logo is required.'}), 400

        logo_file = request.files['logo']

        if logo_file.filename == '':
            return jsonify({'success': False, 'message': 'No selected file.'}), 400

        # Secure filename and save
        logo_filename = secure_filename(f"logo_{request.form.get('company_email')}_{logo_file.filename}")
        logo_path = os.path.join(app.config['UPLOAD_FOLDER'], logo_filename)
        logo_file.save(logo_path)

        # Get form data
        company_name = request.form.get('company-name', '').strip()
        industry = request.form.get('industry', '').strip()
        company_size = request.form.get('company-size', '').strip()
        description = request.form.get('description', '').strip()
        company_email = request.form.get('email', '').strip().lower()
        company_password = request.form.get('password', '')

        # Validate required fields
        if not all([company_name, industry, company_size, description, company_email, company_password]):
            return jsonify({'success': False, 'message': 'Missing fields.'}), 400

        # Hash password
        hashed_pw = bcrypt.hashpw(company_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

        cur = mysql.connection.cursor()

        # Check email uniqueness
        cur.execute("SELECT company_id FROM company WHERE company_email = %s", (company_email,))
        if cur.fetchone():
            cur.close()
            return jsonify({'success': False, 'message': 'Email already exists.'}), 409

        # Insert company data
        cur.execute("""
            INSERT INTO company (
                company_name, industry, company_size, description, 
                company_logo_URL, company_email, company_password
            ) VALUES (%s, %s, %s, %s, %s, %s, %s)
        """, (
            company_name, industry, company_size, description, 
            logo_path, company_email, hashed_pw
        ))

        mysql.connection.commit()
        cur.close()

        return jsonify({
            'success': True,
            'message': 'Company registration successful!',
            'redirect': '/company-login.html'
        }), 201

    except Exception as e:
        mysql.connection.rollback()
        return jsonify({
            'success': False,
            'message': 'Server error during registration.',
            'error': str(e)
        }), 500


@app.route('/company-login', methods=['POST'])
def company_login():
    try:
        data = request.get_json()
        company_email = data.get('email', '').strip().lower()
        company_password = data.get('password', '').strip()

        if not company_email or not company_password:
            return jsonify({'success': False, 'message': 'Please fill in all fields.'}), 400

        cur = mysql.connection.cursor()
        cur.execute("SELECT company_id, company_name, company_password FROM company WHERE company_email = %s", (company_email,))
        company = cur.fetchone()

        if not company:
            cur.close()
            return jsonify({'success': False, 'message': 'Invalid email or password.'}), 401

        stored_password = company[2]
        if not bcrypt.checkpw(company_password.encode('utf-8'), stored_password.encode('utf-8')):
            cur.close()
            return jsonify({'success': False, 'message': 'Invalid email or password.'}), 401

        company_data = {
            'company_id': company[0],
            'company_name': company[1],
            'company_email': company_email,
        }

        cur.close()

        return jsonify({
            'success': True,
            'message': 'Login successful!',
            'company': company_data,
            'redirect': 'company-dashboard.html'
        }), 200

    except Exception as e:
        return jsonify({
            'success': False,
            'message': 'Server error during login.',
            'error': str(e)
        }), 500



@app.route('/jobseeker-profile', methods=['GET'])
def get_jobseeker_profile():
    user_id = session.get('user_id')
    if not user_id:
        return jsonify({'error': 'User not logged in'}), 401

    try:
        # Use flask_mysqldb instead of mysql.connector
        cur = mysql.connection.cursor(dictionary=True)
        cur.execute("""
            SELECT 
               CONCAT(first_name, ' ', last_name) AS name,
               major AS profession,
               user_email     AS email,
               CV_URL         AS cvUrl,
               CL_URL         AS coverLetterUrl
            FROM user
            WHERE user_id = %s
        """, (user_id,))
        user = cur.fetchone()
        cur.close()

        if not user:
            return jsonify({'error': 'User not found'}), 404

        return jsonify(user)

    except Exception as err:
        # Log the real error so we can debug next time
        app.logger.exception("Error in jobseeker-profile")
        return jsonify({'error': str(err)}), 500



if __name__ == '__main__':
    app.run(debug=True)
